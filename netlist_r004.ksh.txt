#!/bin/ksh

################################################################################# NETLIST Netapp Storage Monitor ##################################################################################
#                                                                                                                                                                                                 #
#           Name:  netlist                   {Release = 004, Modified: 11/09/10, Created: 10/11/10, Author = Bill Nunn}                                                                           #
#                                                                                                                                                                                                 #
#         Syntax:  ./netlist [-rst] grp="<name>" rpt="<name>" [info="<msg>"] [excl=<flr1,flr2,.>] [warn=<###>] [crit=<###>] [vol=<###>] [w_id=<id,.>] [c_id=<id,.>] [v_id=<id,.>] [e_id=<id,.>]   #
#                              :::                                                                                                                                                                #
#        Options:              :::-("t": "timestamp" - "$ts" added to output file name.)                                                                                                          #
#                              ::--("s": "scratch"   - "/tmp/nettmp*" temporary work files are not removed at the end of execution.)                                                              #
#                              :---("r": "remove"    - remove all old output files.  If "-r" is not specified, old output files with embedded timestamps ($ts) are not removed.)                  #
#                                                                                                                                                                                                 #
#          Parms:   grp="<grp_name>"     - Specify in double quotes.  DFM netapp filer group names  (use "dfm group list -r" to display groups  defined on DFM host).                             #
#                   rpt="<rpt_name>"     - Specify in double quotes.  DFM netapp filer report names (use "dfm report list"   to display reports defined on DFM host).                             #
#                 [info="<msg>"]         - Specify in double quotes.  Optional informational message sent to $w_id, $c_id & $v_id group email lists.                                              #
#                 [excl="<flr1,flr2,.>"] - Specify in double quotes.  Filer exclude list ("<full_name>" or "<partial_name>*").  (ex: excl="oz101-filer14,oz101-na-san*").               * 1       #
#                 [warn=<0-100>]         - warning  threshold percent (default:  70, alert_all: 0), email $w_id group email list if %util. of oversubscribed volume >= $warn.           * 2       #
#                 [crit=<0-100>]         - Critical threshold percent (default:  85, alert_all: 0), email $c_id group email list if %util. of oversubscribed volume >= $crit.           * 2       #
#                  [vol=<0-100>]         - Vol Used threshold percent (default:  95, alert_all: 0), email $v_id group email list if vol %util. >= $vol regardless of oversubscription.  * 2       #
#                 [w_id=<id1,id2,...>]   - Warning  threshold alert group email list (default: storage-admin@cisco.com).                                                                * 3       #
#                 [c_id=<ep1,ep2,...>]   - Critical threshold alert group email list (default: storage-admin@epage.cisco.com).                                                          * 3       #
#                 [v_id=<vo1,vo2,...>]   - Vol Used threshold alert group email list (default: storage-admin@cisco.com,storage-admin@epage.cisco.com).                                  * 3       #
#                 [e_id=<st1,st2,...>]   - Error email group list (default: ndcs-storage-ops@cisco.com).  Notify storage admin group(s) if netlist returns non-zero return code.        * 3       #
#                                                                                                                                                                                                 #
#              *Note 1:  Alerts will not be reported for filers included in the filer exclude list ($excl).  Wildcard (*) may be used with partial filer name (ex: oz101-na-san*).                # 
#              *Note 2:  If ">100" percent is specified for $warn, $crit or $vol, no alerts will be sent to $w_id, $c_id or $v_id group email lists respectively.                                 #
#              *Note 3:  If a group email list ($w_id, $c_id, $w_id) is set to null (ex: w_id=""), no alerts are sent to that group.  $e_id should not be set to null.                            # 
#                                                                                                                                                                                                 #
#     Repository: https://github.com/bluenunn/Toolchest/                                                                                                                                          #
#                                                                                                                                                                                                 #
#       Overview:  Netlist audits %_used utilization for oversubscribed Netapp filer volumes.  It may be run or cron'd on any Unix DFM host supporting "dfm" & "mailx" commands.                  #
#                  If an oversubscribed volume's utilization reaches the $warn threshold (default: 70), an alert is sent to the $w_id group email list.  If an oversubscribed                     #
#                  volume's utilization reaches the $crit threshold (default: 85), an alert is sent to the $c _id email group list.  Alerts may also be sent based on volume                      #
#                  %utilization regardless of whether or not the volume is oversubscribed (set $vol <= 100).  DFM report (rpt="<rpt_name>") must contain four following fields                    #
#                  "Appliance Full Name", "Volume Name", "Volume Used %" and "Volume Quota Committed %".  Location of these four fields may be anywhere in the selected report:                   #
#                                                                                                                                                                                                 #
#                       dfm-rtp:/tmp $ dfm report view -g "Datacenter/oz101" "Volume overcommit monitoring":                                                                                      #
#                                                         |                | |                            |                                                                                       #
#                                                         |----------------| |----------------------------|                                                                                       #
#                                                         {  netlist $grp  } {        netlist $rpt        }                                                                                       #
#                                                                                                                                                                                                 #
#                       Appliance Full Name           Volume Name                Volume Used Capacity Volume Used % Volume Quota Committed Volume Quota Committed % ...                           #
#                       ----------------------------- -------------------------- -------------------- ------------- ---------------------- ------------------------ ...                           #
#                       oz101-08t-filer20b.cisco.com  vol0                                     423 MB             1                0 bytes                        0 ...                           #
#                       oz101-12l-filer19a.cisco.com  local2                                   508 GB            16                4.00 TB                      130 ...                           #
#                       oz101-12l-filer19a.cisco.com  bpim_prod_async15                        610 MB             2                0 bytes                        0 ...                           #
#                       oz101-12l-filer19a.cisco.com  local1                                  1.76 TB            15                15.1 TB                      128 ...                           #
#                       oz101-12l-filer19a.cisco.com  bpim_prod_sync                          4.92 GB             1                0 bytes                        0 ...                           #
#                       oz101-filer14.cisco.com       zlmessages5                              309 GB            31                0 bytes                        0 ...                           #
#                       oz101-filer14.cisco.com       zlattachments2                          2.32 TB            49                0 bytes                        0 ...                           #
#                       oz101-na-san1a.cisco.com      QTC_1                                   1.01 TB            96                0 bytes                        0 ...                           #
#                       oz101-na-san1b.cisco.com      vol0                                    7.27 GB             4                0 bytes                        0 ...                           #
#                       oz101-12l-filer19a.cisco.com  testrep                                 0 bytes             0                0 bytes                          ...                           #
#                       oz101-12l-filer19a.cisco.com  ebiz_prod2_sync                          124 KB             0                0 bytes                        0 ...                           #
#                       |                           | |                        |                      |           |                        |                      |                               #
#                       |---------------------------| |------------------------|                      |-----------|                        |----------------------|                               #
#                       {        req. field         } {       req. field       }                      {req. field }                        {      req. field      }                               #
#                                                                                                                                                                                                 #
#                  Sample related "netlist" syntax using "defaults" and "overrides" (alert for volume utilization >= 95% regardless of oversubscription (Volume Quota Committed %).               #
#                                                                                                                                                                                                 #
#                         Defaults:  dfm-rtp:/tmp $ ./netlist grp="Datacenter/oz101" rpt="Volume overcommit monitoring"                                                                           #
#                                                                                                                                                                                                 #
#                       %vol >= 95:  dfm-rtp:/tmp $ ./netlist grp="Datacenter/oz101" rpt="Volume overcommit monitoring" vol=95 v_id=ndcs-storage-ops@cisco.com,storage-admin@epage.cisco.com      #
#                                                                                                                                                                                                 #
#        Outputs:  /tmp/netlist_${grp_name}_${rpt_name}[${ts}].txt          # Forward slashes ("/") and spaces (" ") are replaced with at signs ("@") in DFM group and report names.              #
#                  /tmp/netlist_stderr                                      # Capture commands and related errors (if any) generated by netlist.                                                  #
#                                                                                                                                                                                                 #
#                  The netlist output file only contains volumes from the report specified that meet or exceed the "warning/critical/volume" alert threshold percentages.                         #
#                  "Volume Quota Committed %" only accounts for qtrees on a volume with hard quotas defined (verify: sudo rsh <filername> "quota report" | egrep "<qtree_name>").                 #
#                  Any qtree defined on a volume without an active hard quota being enforced, reflects a "<null>" value in the "Used (%)" field of the DFM "Qtree Capacity" report.               #
#                  Any qtree on not using an active hard quota, could potentially use of 100% of the space on the volume.                                                                         #
#                                                                                                                                                                                                 #
###################################################################################################################################################################################################

script=$0                                                                                          # capture script name

fields=$*                                                                                          # capture script parameters

cmd_line="$0 $@"                                                                                   # capture command line

if [[ $(uname) = SunOS ]];then awk=nawk;else awk=awk;fi                                            # set "awk" versus "nawk"

id=$(id|$awk '{print substr($1,index($1,"(")+1,index($1,")")-index($1,"(")-1)}')                   # determine user id

if [[ $id = root ]]; then sudo="";else sudo="sudo";fi                                              # determine if "sudo" is needed

host=$(uname -n)                                                                                   # capture hostname

if nslookup $host 2>&1 | egrep "Non-existent host" > /dev/null;then
     ip="ip_unknown"                                                                               # host IP address not found
else
     ip=$(nslookup $host | $awk '/Address/{print $NF}' | tail -1)                                  # determine host IP address
fi

os_type=$(uname)                                                                                   # set host OS type

# Determine specific OS (e.g. os_type "Linux" = "CEL4|CEL5|ESX3|ESX4...")

if [[ $os_type = "Linux" ]];then
     os=$($awk '/^version:/{ver=substr($2,1,index($2,".")-1)
                  if ($2~/esx/) {gsub(/esx-/,"",ver);print "ESX"ver}
                  else {print "CEL"ver}}'                      /etc/system-profile)
     os_ver=$($awk '/^version/{gsub(/esx-/,"",$NF);print $NF}' /etc/system-profile)
else
     os=$os_type
     os_ver=$(uname -a | $awk '{print $3}')
fi

date=$(date '+%m/%d/%y')                                                                           # set date

time=$(date '+%H:%M:%S')                                                                           # set time

# Define STDERR & temporary (scratch "-s") work files

stderr=/tmp/netlist_stderr                                                                         # set STDERR file

tmp="/tmp/nettmp"                                                                                  # set temporary file prefix

# Initialize STDERR & temporary (scratch "-s") work files

$sudo rm -rf $stderr                                                                               # remove previous STDERR file

$sudo rm -rf ${tmp}_*                                                                              # remove previous temporary files

touch $stderr                        2>/dev/null

touch ${tmp}_fields                  2>/dev/null
touch ${tmp}_options                 2>/dev/null
touch ${tmp}_parms                   2>/dev/null
touch ${tmp}_parms_fmt               2>/dev/null
touch ${tmp}_header                  2>/dev/null
touch ${tmp}_dfm                     2>/dev/null
touch ${tmp}_dfm_csv                 2>/dev/null
touch ${tmp}_dfm_fields              2>/dev/null
touch ${tmp}_dfm_req                 2>/dev/null
touch ${tmp}_dfm_alerts              2>/dev/null
touch ${tmp}_excludes                2>/dev/null
touch ${tmp}_dfm_filtered            2>/dev/null
touch ${tmp}_mailer                  2>/dev/null

# Capture command line fields & options:

for field in $(echo $fields); do echo $field; done                                                                                                         >> ${tmp}_fields

egrep "^-" ${tmp}_fields                                                                                                                                   >> ${tmp}_options

egrep -v "^-" ${tmp}_fields                                                                                                                                >> ${tmp}_parms

if [[ -s ${tmp}_parms ]];then
     $awk 'BEGIN {ct_eq=0}
           $1~/=/{++ct_eq;if (ct_eq == 1) {printf("%s",$1)} else {printf("\n%s",$1)}}
          $1!~/=/{printf(" %s",$1)}
             END {print ""}' ${tmp}_parms                                                                                                                  >> ${tmp}_parms_fmt
fi

# Set options (0: option not set, 1: option set):

option_r=0
option_s=0
option_t=0

if egrep "r" ${tmp}_options > /dev/null;then option_r=1;fi
if egrep "s" ${tmp}_options > /dev/null;then option_s=1;fi
if egrep "t" ${tmp}_options > /dev/null;then option_t=1;fi

# Verify if old output files with embedded timestamps ($ts) are to be removed ($option_r 0: save, 1: remove) 

if [[ $option_r -eq 1 ]];then $sudo rm -rf /tmp/netlist_*.txt;fi

# Set timestamp ($option_t = 0: null, 1: _yyyy-mm-dd_hh:mm:ss):

if [[ $option_t -eq 1 ]];then ts="_$(date '+%Y-%m-%d_%H:%M:%S')";else ts="";fi

# Set optional parm default values:

info=""
excl=""
warn=70
crit=85
vol=95
w_id="storage-admin@cisco.com"
c_id="storage-admin@epage.cisco.com"
v_id="storage-admin@cisco.com,storage-admin@epage.cisco.com"
e_id="ndcs-storage-ops@cisco.com"

# Check/set optional parm override values:

if egrep "^info=" ${tmp}_parms_fmt > /dev/null;then info=$($awk '/^info=/{print substr($0,index($0,"info=")+5)}' ${tmp}_parms_fmt);fi
if egrep "^excl=" ${tmp}_parms_fmt > /dev/null;then excl=$($awk '/^excl=/{print substr($0,index($0,"excl=")+5)}' ${tmp}_parms_fmt);fi
if egrep "^warn=" ${tmp}_parms_fmt > /dev/null;then warn=$($awk '/^warn=/{print substr($0,index($0,"warn=")+5)}' ${tmp}_parms_fmt);fi
if egrep "^crit=" ${tmp}_parms_fmt > /dev/null;then crit=$($awk '/^crit=/{print substr($0,index($0,"crit=")+5)}' ${tmp}_parms_fmt);fi
if egrep "^vol="  ${tmp}_parms_fmt > /dev/null;then  vol=$($awk '/^vol=/{print substr($0,index($0,"vol=")+4)}'   ${tmp}_parms_fmt);fi
if egrep "^w_id=" ${tmp}_parms_fmt > /dev/null;then w_id=$($awk '/^w_id=/{print substr($0,index($0,"w_id=")+5)}' ${tmp}_parms_fmt);fi
if egrep "^c_id=" ${tmp}_parms_fmt > /dev/null;then c_id=$($awk '/^c_id=/{print substr($0,index($0,"c_id=")+5)}' ${tmp}_parms_fmt);fi
if egrep "^v_id=" ${tmp}_parms_fmt > /dev/null;then v_id=$($awk '/^v_id=/{print substr($0,index($0,"v_id=")+5)}' ${tmp}_parms_fmt);fi
if egrep "^e_id=" ${tmp}_parms_fmt > /dev/null;then e_id=$($awk '/^e_id=/{print substr($0,index($0,"e_id=")+5)}' ${tmp}_parms_fmt);fi

# Verify/set required parm variables:

if egrep "^grp=" ${tmp}_parms_fmt > /dev/null;then
     grp=$($awk '/^grp=/{print substr($0,index($0,"grp=")+4)}' ${tmp}_parms_fmt)
     grp_name=$(echo "$grp" | sed 's/[\/ ]/@/g')
else
     cat ${tmp}_header                                                                                                                                     >> $stderr
     echo "Error: netlist DFM group (grp=\"<grp_name>\") not specifed.  See $stderr for details.  \"netlist\" exiting."                                    >> $stderr
     echo "Suggestion: Might be a good time to break out that yoga video ;-)" | $awk '{print "\n"$0"\n"}'                                                  >> $stderr
     cat $stderr | mailx -s "${host} Netlist Error: DFM group not specified." $e_id
     exit 1
fi

if egrep "^rpt=" ${tmp}_parms_fmt > /dev/null;then
     rpt=$($awk '/^rpt=/{print substr($0,index($0,"rpt=")+4)}' ${tmp}_parms_fmt)
     rpt_name=$(echo "$rpt" | sed 's/[\/ ]/@/g')
else
     cat ${tmp}_header                                                                                                                                     >> $stderr
     echo "Error: netlist DFM report (rpt=\"<rpt_name>\") not specifed.  See $stderr for details.  \"netlist\" exiting."                                   >> $stderr
     echo "Suggestion: Instead of some boring report, you might check out Tibor Fischer's Under The Frog ;-)" | $awk '{print "\n"$0"\n"}'                  >> $stderr
     cat $stderr | mailx -s "${host} Netlist Error: DFM report not specified." $e_id
     exit 1
fi

# Initialize netlist output file:

$sudo rm -rf /tmp/netlist_${grp_name}_${rpt_name}.txt

output=/tmp/netlist_${grp_name}_${rpt_name}${ts}.txt

touch $output

# Create Header:

echo  "Hostname: $host"                                                         | $awk '{print "\n"$0}'                                                    >> ${tmp}_header
echo  "IP Address: $ip"                                                                                                                                    >> ${tmp}_header
echo  "OS Type: $os"                                                                                                                                       >> ${tmp}_header
echo  "OS Version: $os_ver"                                                                                                                                >> ${tmp}_header
echo  "Date: $date $time"                                                       | $awk '{print $0"\n"}'                                                    >> ${tmp}_header
echo  "$cmd_line"                                                               | $awk '{print $0"\n"}'                                                    >> ${tmp}_header
echo  "Output:  \"$output\" contains netlist filer alerts."                                                                                                >> ${tmp}_header
echo  "Logfile: \"$stderr\" contains netlist commands run and errors (if any)." | $awk '{print $0"\n"}'                                                    >> ${tmp}_header
if [[ -n $info ]];then echo  "Info: $info"                                      | $awk '{print $0"\n"}';fi                                                 >> ${tmp}_header
echo  "Thresholds: %Vol(${vol}%), Crit(${crit}%), Warn(${warn}%).     {\"Crit\" & \"Warn\" alerts only apply to overcommitted volumes.}"                   >> ${tmp}_header

# Verify/set existence of "dfm" and "mailx" commands on host:

which dfm > /dev/null 2>&1

if [[ $? -ne 0 ]];then
     cat ${tmp}_header                                                                                                                                     >> $stderr
     echo "Error: \"dfm\" command (\"which dfm\") not found on host $host.  See $stderr for details.  \"netlist\" exiting."                                >> $stderr
     echo "Suggestion: Maybe a relaxing game of twister might be appropriate right about now ;-)" | $awk '{print "\n"$0"\n"}'                              >> $stderr
     cat $stderr | mailx -s "${host} Netlist Error: \"dfm\" command not found on host" $e_id
     exit 1
fi

which mailx > /dev/null 2>&1

if [[ $? -ne 0 ]];then
     cat ${tmp}_header                                                                                                                                     >> $stderr
     echo "Error: \"mailx\" command (\"which mailx\") not found on host $host.  See $stderr for details.  \"netlist\" exiting."                            >> $stderr
     echo "Suggestion: This may offer an argument in favor of the relative merits of the pony express ;-)" | $awk '{print "\n"$0"\n"}'                     >> $stderr
     cat $stderr | mailx -s "${host} Netlist Error: \"mailx\" command not found on host" $e_id
     exit 1
fi

# Capture DFM output:

echo "Command: dfm report view -s "Volume Used %" -g \"$grp\" \"$rpt\"" | $awk '{print "\n"$0}'                                                            >> $stderr
dfm report view -s "Volume Used %" -g "$grp" "$rpt" 2>>$stderr                                                                                             >> ${tmp}_dfm

# Check DFM report for required fields ("Appliance Full Name", "Volume Name", "Volume Used %", Volume Quota Committed %):

egrep "Appliance Full Name" ${tmp}_dfm > /dev/null 2>&1

if [[ $? -ne 0 ]];then
     cat ${tmp}_header                                                                                                                                     >> $stderr
     echo "Error: \"Appliance Full Name\" not present in DFM report $rpt on $host.  See $stderr for details.  \"netlist\" exiting."                        >> $stderr
     echo "Suggestion: Those appliances can be tricky.  Did you remember to purchase the extended warranty? ;-)" | $awk '{print "\n"$0"\n"}'               >> $stderr
     cat $stderr | mailx -s "${host} Netlist Error: \"Appliance Full Name\" not found in DFM report." $e_id
     exit 1
fi

egrep "Volume Name" ${tmp}_dfm > /dev/null 2>&1

if [[ $? -ne 0 ]];then
     cat ${tmp}_header                                                                                                                                     >> $stderr
     echo "Error: \"Volume Name\" not present in DFM report $rpt on $host.  See $stderr for details.  \"netlist\" exiting."                                >> $stderr
     echo "Suggestion: Maybe it is time to give everyone a number instead of a name.  Big brother's watching... ;-)" | $awk '{print "\n"$0"\n"}'           >> $stderr
     cat $stderr | mailx -s "${host} Netlist Error: \"Volume Name\" not found in DFM report." $e_id
     exit 1
fi

egrep "Volume Used %" ${tmp}_dfm > /dev/null 2>&1

if [[ $? -ne 0 ]];then
     cat ${tmp}_header                                                                                                                                     >> $stderr
     echo "Error: \"Volume Used %\" not present in DFM report $rpt on $host.  See $stderr for details.  \"netlist\" exiting."                              >> $stderr
     echo "Suggestion: If we all just promise to play in the sandbox nicely, we should be fine ;-)" | $awk '{print "\n"$0"\n"}'                            >> $stderr
     cat $stderr | mailx -s "${host} Netlist Error: \"Volume Used %\" not found in DFM report." $e_id
     exit 1
fi

egrep "Volume Quota Committed %" ${tmp}_dfm > /dev/null 2>&1

if [[ $? -ne 0 ]];then
     cat ${tmp}_header                                                                                                                                     >> $stderr
     echo "Error: \"Volume Quota Committed %\" not present in DFM report $rpt on $host.  See $stderr for details.  \"netlist\" exiting."                   >> $stderr
     echo "Suggestion: Ask Peter, I think the quotas are hiding behind the cabbages in Mr. McGregor's garden. ;-)" | $awk '{print "\n"$0"\n"}'             >> $stderr
     cat $stderr | mailx -s "${host} Netlist Error: \"Volume Quota Committed %\" not found in DFM report." $e_id
     exit 1
fi

# Capture CSV DFM output & fields by position:

echo "Command: dfm report view -F csv -s "Volume Used %" -g \"$grp\" \"$rpt\"" | $awk '{print "\n"$0}'                                                     >> $stderr
dfm report view -F csv -s "Volume Used %" -g "$grp" "$rpt" 2>>$stderr                                                                                      >> ${tmp}_dfm_csv

if [[ $? -ne 0 ]];then
     cat ${tmp}_header                                                                                                                                     >> $stderr
     echo "Error: Unsucessful capturing DFM CSV data.  See $stderr for details.  \"netlist\" exiting."                                                     >> $stderr
     echo "Suggestion: By the third mojito, those commas won't seem nearly so important ;-)" | $awk '{print "\n"$0"\n"}'                                   >> $stderr
     cat $stderr | mailx -s "${host} Netlist Error: Unsuccesful collecting DFM CSV data." $e_id
     exit 1
fi

head -1 ${tmp}_dfm_csv | tr '[,]' '[\n]' | $awk '{print substr($0,2,length($0)-2)}'                                                                        >> ${tmp}_dfm_fields

# Sample dfm report data:

#                    1                           2                                        4                                          6
#                                                                                                                        1                      1
#                                 2 3                        5                      7           9                        1                      3
#     1                           9 1                        6                      9           1                        6                      9
#     ----+----10---+----20---+----30---+----40---+----50---+----60---+----70---+----80---+----90---+----100--+----110--+----120--+----130--+----140--+
#     {--------- len=29 ----------} {-------- len=26 --------}                      {-- len=13 -}                        {------- len=24 -------}

#     Appliance Full Name           Volume Name                Volume Used Capacity Volume Used % Volume Quota Committed Volume Quota Committed % ...
#     ----------------------------- -------------------------- -------------------- ------------- ---------------------- ------------------------ ...
#     oz101-08t-filer20b.cisco.com  vol0                                     423 MB             1                0 bytes                        0 ...
#     oz101-12l-filer19a.cisco.com  testrep                                 0 bytes             0                0 bytes                          ...
#     |                           | |                        |                      |           |                        |                      |
#     |---------------------------| |------------------------|                      |-----------|                        |----------------------|
#     {        req. field         } {       req. field       }                      {req. field }                        {      req. field      }

# Determine required dfm field coordinates:

appl_pos=$($awk '/^Appliance Full Name$/{print NR}' ${tmp}_dfm_fields)
appl_len=$($awk 'NR==2{print length($appl_pos)}' appl_pos=$appl_pos ${tmp}_dfm)
appl_beg=$($awk 'NR==1{print index($0,"Appliance Full Name")}' ${tmp}_dfm)
appl_end=$(echo ${appl_beg}+${appl_len}-1 | bc)

vol_pos=$($awk '/^Volume Name$/{print NR}' ${tmp}_dfm_fields)
vol_len=$($awk 'NR==2{print length($vol_pos)}' vol_pos=$vol_pos ${tmp}_dfm)
vol_beg=$($awk 'NR==1{print index($0,"Volume Name")}' ${tmp}_dfm)
vol_end=$(echo ${vol_beg}+${vol_len}-1 | bc)

vused_pos=$($awk '/^Volume Used %$/{print NR}' ${tmp}_dfm_fields)
vused_len=$($awk 'NR==2{print length($vused_pos)}' vused_pos=$vused_pos ${tmp}_dfm)
vused_beg=$($awk 'NR==1{print index($0,"Volume Used %")}' ${tmp}_dfm)
vused_end=$(echo ${vused_beg}+${vused_len}-1 | bc)

qcom_pos=$($awk '/^Volume Quota Committed %$/{print NR}' ${tmp}_dfm_fields)
qcom_len=$($awk 'NR==2{print length($qcom_pos)}' qcom_pos=$qcom_pos ${tmp}_dfm)
qcom_beg=$($awk 'NR==1{print index($0,"Volume Quota Committed %")}' ${tmp}_dfm)
qcom_end=$(echo ${qcom_beg}+${qcom_len}-1 | bc)

# Isolate required field data:

$awk 'NR < 3 {appl=substr($0,ap_b,ap_l);vol=substr($0,vo_b,vo_l);vused=substr($0,vu_b,vu_l);qcom=substr($0,qc_b,qc_l)
              printf("%-29s   %-26s   %13s   %24s\n",appl,vol,vused,qcom)}
      NR > 2 {if (substr($0,ap_b,1) == " ") {appl="-"}   else {appl=substr($0,ap_b,ap_l)}
              if (substr($0,vo_b,1) == " ") {vol="-"}    else {vol=substr($0,vo_b,vo_l)}
              if (substr($0,vu_e,1) == " ") {vused="-"}  else {vused=substr($0,vu_b,vu_l)}
              if (substr($0,qc_e,1) == " ") {qcom="-"}   else {qcom=substr($0,qc_b,qc_l)}
              printf("%-29s   %-26s   %13s   %24s\n",appl,vol,vused,qcom)}
' ap_l=$appl_len ap_b=$appl_beg vo_l=$vol_len vo_b=$vol_beg vu_l=$vused_len vu_b=$vused_beg vu_e=$vused_end qc_l=$qcom_len qc_b=$qcom_beg qc_e=$qcom_end ${tmp}_dfm |\
egrep -v "^Totals"                                                                                                                                                       >> ${tmp}_dfm_req

# Sample ${tmp}_dfm_alerts data:

#                    1                             2                     3                    4
#                                                                                                         1   1                1
#                                 2   3                        5   6           7   7                      0   0                2
#     1                           9   3                        8   2           4   8                      1   5                2
#     ----+----10---+----20---+----30---+----40---+----50---+----60---+----70---+----80---+----90---+----100--+----110--+----120--+
#     {--------- len=29 ----------}   {-------- len=26 --------}   {-- len=13 -}   {------- len=24 -------}   {---- len=18 ----}

#     Appliance Full Name             Volume Name                  Volume Used %   Volume Quota Committed %         Alerts
#     -----------------------------   --------------------------   -------------   ------------------------   ------------------
#     oz101-filer14.cisco.com         zlmessages3                            100                          0   %Vol
#     oz101-12u-filer02b.cisco.com    ecm_cs3                                 98                        134   %Vol   Crit   Warn
#     oz101v-25p-filer18b.cisco.com   vol_ccix_ondem                          93                        167   Crit   Warn
#     oz101-12u-filer15a.cisco.com    cdc_prod_sync                           81                        109   Crit   Warn
#     oz101-48m-filer07b.cisco.com    vol_ebiz_nprd1_ondem                    80                        120   Crit   Warn
#     oz101-53n-filer23b.cisco.com    rcdn_pod4_vol0                          38                        110   Warn
#     oz101-12l-filer19a.cisco.com    testrep2                                97                          -   %Vol

# Capture alerts (%Vol, Crit, Warn):

$awk 'NR == 1 {alert_v="%Vol";alert_c="Crit";alert_w="Warn";print $0"         Alerts"}
      NR == 2 {printf("%s   ------------------",$0)}
      NR  > 2 {record=$0;used=$3;commited=$4;printf("\n%s",record)
               if (used >= vol) {printf("   %s",alert_v)}
               if (used >= crit && commited >= 100) {printf("   %s",alert_c)}
               if (used >= warn && commited >= 100) {printf("   %s",alert_w)}}
          END {print ""}' vol=$vol crit=$crit warn=$warn ${tmp}_dfm_req | $awk 'NF >= 5 {print $0}'                                                        >> ${tmp}_dfm_alerts

# Check for filers to be excluded from threshold alert reporting:

if [[ -n $excl ]];then
     echo $excl | tr '[,]' '[\n]' | $awk '{last=substr($1,length($1),1);if (last == "*") {print "^"$1} else {print "^"$1"[\\. ]"}}'
fi | sort -u | egrep -v "^$"                                                                                                                               >> ${tmp}_excludes

if [[ -s ${tmp}_excludes ]];then egrep -f ${tmp}_excludes -v ${tmp}_dfm_alerts;else cat ${tmp}_dfm_alerts;fi                                               >> ${tmp}_dfm_filtered

# Determine types and #s of alerts present in ${tmp}_dfm_alerts:

if egrep " %Vol | %Vol$" ${tmp}_dfm_filtered > /dev/null 2>&1;then alert_vols=1;else alert_vols=0;fi
if egrep " Crit | Crit$" ${tmp}_dfm_filtered > /dev/null 2>&1;then alert_crit=1;else alert_crit=0;fi
if egrep " Warn | Warn$" ${tmp}_dfm_filtered > /dev/null 2>&1;then alert_warn=1;else alert_warn=0;fi

alert_vols_num=$($awk '{print substr($0,105)}' ${tmp}_dfm_filtered | sed 's/Crit   Warn/Crit/g' | egrep "%Vol$" | wc -l | $awk '{print $1}')
alert_crit_num=$($awk '{print substr($0,105)}' ${tmp}_dfm_filtered | sed 's/Crit   Warn/Crit/g' | egrep "Crit$" | wc -l | $awk '{print $1}')
alert_warn_num=$($awk '{print substr($0,105)}' ${tmp}_dfm_filtered | sed 's/Crit   Warn/Crit/g' | egrep "Warn$" | wc -l | $awk '{print $1}')

echo  "Alert_Summary: %Vol: ${alert_vols_num}, Crit: ${alert_crit_num}, Warn: ${alert_warn_num}" | $awk '{print $0"\n"}'                                   >> ${tmp}_header

# Sample $output data:

#          1                    2                              3                     4                    5
#                                                                                                                     1
#                 1                           4   4                        7   7           8   9                      1
#     1       9   3                           1   5                        0   4           6   0                      3
#     ----+----10---+----20---+----30---+----40---+----50---+----60---+----70---+----80---+----90---+----100--+----110--+
#     {len=9 -}   {--------- len=29 ----------}   {-------- len=26 --------}   {-- len=13 -}   {------- len=24 -------}

#     Alerts      Appliance_Full_Name             Volume_Name                  Volume_Used_%   Volume_Quota_Committed_%
#     ---------   -----------------------------   --------------------------   -------------   ------------------------
#     %Vol        oz101-filer14.cisco.com         zlmessages3                            100                          0
#     %Vol_Crit   oz101-12u-filer02b.cisco.com    ecm_cs3                                 98                        134
#     Crit        oz101v-25p-filer18b.cisco.com   vol_ccix_ondem                          93                        167
#     Crit        oz101-12u-filer15a.cisco.com    cdc_prod_sync                           81                        109
#     Crit        oz101-48m-filer07b.cisco.com    vol_ebiz_nprd1_ondem                    80                        120
#     Warn        oz101-53n-filer23b.cisco.com    rcdn_pod4_vol0                          38                        110
#     %Vol        oz101-12l-filer19a.cisco.com    testrep2                                97                          -

# Populate netlist output file:

cat ${tmp}_header                                                                                                                                          >> $output

$awk  'BEGIN {print "Alerts      Appliance_Full_Name             Volume_Name                  Volume_Used_%   Volume_Quota_Committed_%"
              print "---------   -----------------------------   --------------------------   -------------   ------------------------"}
      NR > 2 {gsub(/Crit   Warn/,"Crit",$0);gsub(/%Vol   Crit/,"%Vol_Crit",$0);gsub(/%Vol   Warn/,"%Vol_Warn",$0)
              alert=$5;appliance=$1;volume=$2;used=$3;committed=$4
              printf("%-9s   %-29s   %-26s   %13s   %24s\n",alert,appliance,volume,used,committed)}' ${tmp}_dfm_filtered                                   >> $output

# "mailx" alert message to relevant group email lists ($v_id, $c_id, $w_id):

if [[ $alert_vols -eq 1 ]];then echo "$v_id" | tr '[,]' '[\n'] | egrep -v "^$";fi                                                                          >> ${tmp}_mailer
if [[ $alert_crit -eq 1 ]];then echo "$c_id" | tr '[,]' '[\n'] | egrep -v "^$";fi                                                                          >> ${tmp}_mailer
if [[ $alert_warn -eq 1 ]];then echo "$w_id" | tr '[,]' '[\n'] | egrep -v "^$";fi                                                                          >> ${tmp}_mailer

if [[ -s ${tmp}_mailer ]];then
mailer=$(sort -u ${tmp}_mailer | tr '[\n]' '[,]' | sed 's/,$//')
echo "cat \"$output\" | mailx -s \"${host} Netlist Alerts: $output\"  $mailer" | $awk '{print "\n"$0}'                                                     >> $stderr
cat "$output" | mailx -s "${host} Netlist Alerts: $output" $mailer
fi

# Check if temporary "scratch" files should be removed ($option_s = 0: remove, 1: save):

if [[ $option_s -eq 0 ]];then $sudo rm -rf ${tmp}_*;fi

exit 0