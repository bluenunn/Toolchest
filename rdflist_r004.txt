#!/bin/ksh

#################################### RDFLIST Symmetrix Remote Data Facility Audit Script ###################################
#                                                                                                                          #
#           Name:  rdflist                    {Release = 004, Modified: 09/25/19, Created: 10/31/07, Author = Bill Nunn}   #
#                                                                                                                          #
#     Repository:  https://github.com/bluenunn/Toolchest/                                                                  #
#                                                                                                                          #
#         Syntax:  ./rdflist -sid nnnn [-doty] [srdf_ts=yyyy_mm]     {"nnnn" = Symmetrix_ID, sample "srdf_ts=2012_08"}     #
#                                        ::::                                                                              #
#                                        ::::-("-y": save "rdflist" temporary files ("/tmp/rdftmp...)                      #
#                                        :::--("-t": timestamp suffix added to "rdflist" output files)                     #
#                                        ::---("-o": override minimum Solutions Enabler (V7.1x) restriction                #
#                                        :----("-d": run "symcfg discover" to sync up SYMAPI_DB)                           #
#                                                                                                                          #
#                                               {One or more of the above options may be specified}                        #
#                                                                                                                          #
#          srdf_ts=yyyy_mm (option displays total SRDF capacity for "yyyy_mm - present" and for past before "yyyy_mm")     #
#                          (default: "<current_year_-1>_<current_month>)                                                   #
#                                                                                                                          #
#          Setup:  [sudo] scp <user_id>@rcdn9-san-mgr1:/apps/storage/tools/rdflist .;sudo chmod +x rdflist                 #
#                                                                                                                          #
#         Output:  /tmp/rdfnnnn[_yyyy-mm-dd_hh:mm:ss].txt          {"nnnn" = Symmetrix ID}                                 #
#                                                                                                                          #
#       Comments:  "rdflist" is supported on HP/UX, Linux & Solaris hosts with Solutions Enabler installed.                #
#                  "rdflist" may be run from a host that sees a Symmetrix as a "Local" or "Remote" array.                  #
#                  "rdflist" provides detailed SRDF data including active concurrent SRDF relationships.                   #
#                                                                                                                          #
#                  EMC Support Matrix contains a complete list of all Symmetrix Director Bit definitions.                  #
#                                                                                                                          #
############################################################################################################################

# "set/verfiy" parameters:

script=$0                                                                                # capture script name

parms=$*                                                                                 # capture command parms

if [[ $(uname) = SunOS ]];then awk=nawk;else awk=awk;fi                                  # set "awk" versus "nawk"

base="/tmp/rdf"                                                                          # set output file base

tmp="/tmp/rdftmp"                                                                        # set temp files prefix

id=$(id|$awk '{print substr($1,index($1,"(")+1,index($1,")")-index($1,"(")-1)}')         # determine user id

if [[ $id = root ]]; then sudo="";else sudo="sudo"; fi                                   # determine if "sudo" is needed

$sudo rm -rf ${tmp}*                                                                     # remove previous temp files

os_type=$(uname)                                                                         # set host OS type

os_ver=$(uname -a | $awk '{print $3}')                                                   # set host OS version

date=$(date '+%m-%d-%y')                                                                 # set date

time=$(date '+%H:%M:%S')                                                                 # set time

for field in $(echo $parms); do echo $field; done > ${tmp}_fields                        # parse command line fields

egrep -v "^\-sid" ${tmp}_fields | egrep "^\-" > ${tmp}_options                           # capture "-t/-x/-y" options

egrep "=" ${tmp}_fields > ${tmp}_parms                                                   # capture parms

# Set optional parm default values:

srdf_ts_yr=$(($(date '+%Y')-1))                                                          # initialize srdf_ts "yyyy" component: current year minus 1
srdf_ts_mo=$(date '+%m')                                                                 # initialize srdf_ts   "mm" component: current month
srdf_ts="${srdf_ts_yr}_${srdf_ts_mo}"                                                    # initialize SRDF timestamp (yyyy_mm): ${srdf_ts_yr}_${srdf_ts_mo}

# Check/set optional parm override values:

if egrep "^srdf_ts=" ${tmp}_parms > /dev/null;then srdf_ts=$($awk '/^srdf_ts=/{print substr($0,index($0,"srdf_ts")+8)}' ${tmp}_parms);fi

srdf_ts_len=$(echo "$srdf_ts" | $awk '{print length($1)}')

# Check for proper format of $srdf_ts (<yyyy>_<mm>, ex: ./rdflist -sid 1161 -x srdf_ts=2012_08) if variable is supplied in command line:

if [[ -n $srdf_ts ]];then
     if [[ $srdf_ts != [0-9][0-9][0-9][0-9]_[0-1][0-9] ]] || [[ $srdf_ts_len -ne 7 ]];then
          echo "\"${script} ${parms}\" srdf_ts format specified in command line is invalid (sample valid entry: srdf_ts=2012_08)." > ${tmp}_stderr
          echo ""
          echo "Invalid \"srdf_ts\" parm value specified in command line."
          echo ""
          echo "\"${script} ${parms}\" output in ${tmp}_stderr"
          echo ""
          exit 1                                                                         # exit if invalid format specified for $srdf_ts in command line
     fi
fi 

if egrep "^srdf_ts=" ${tmp}_parms > /dev/null;then srdf_ts_yr=$($awk '/^srdf_ts=/{print substr($0,index($0,"srdf_ts")+8,4)}' ${tmp}_parms);fi

if egrep "^srdf_ts=" ${tmp}_parms > /dev/null;then srdf_ts_mo=$($awk '/^srdf_ts=/{print substr($0,index($0,"srdf_ts")+13,2)}' ${tmp}_parms);fi

if [[ $srdf_ts_yr -gt $(date '+%Y') ]] || [[ $srdf_ts_yr -eq  $(date '+%Y') && $srdf_ts_mo -gt  $(date '+%m') ]];then
          echo "\"${script} ${parms}\" srdf_ts field specified in command line is greater than currnet <yyyy>_<mm> ($(date '+%Y')_$(date '+%m'))" > ${tmp}_stderr
          echo ""
          echo "Invalid \"srdf_ts\" parm value specified in command line."
          echo ""
          echo "\"${script} ${parms}\" output in ${tmp}_stderr"
          echo ""
          exit 1                                                                         # exit if $srdf_ts specified is in future
fi

# If $srdf_ts specified & valid, set $srdf_ts_yr & $srdf_ts_mo 

if [[ -n $srdf_ts ]];then
     srdf_ts_yr=$(echo $srdf_ts | $awk '{print substr($1,1,4)}')                         # set $srdf_ts_yr
     srdf_ts_mo=$(echo $srdf_ts | $awk '{print substr($1,6,2)}')                         # set $srdf_ts_mo
fi

if egrep "t" ${tmp}_options > /dev/null
then ts="_$(date '+%Y-%m-%d')_${time}"                                                   # if "-t", set $ts (timestamp)
else ts=""
fi

sid=$($awk 'BEGIN {sid_fnd=1}                                                            # capture SID specified in command
          /^-sid$/{sid_fnd=0}
       $1~/^[0-9]/{if (sid_fnd == 0) {sid=$1;sid_fnd=1;print sid}}' ${tmp}_fields)

if [[ -z $sid || $sid = [!0-9] ]];then
     echo "\"${script} ${parms}\" Symmetrix SID is null or is invalid." > ${tmp}_stderr
     echo "\"${script} ${parms}\" output in ${tmp}_stderr"
     exit 1                                                                              # exit if SID is null or invalid
fi

# Verify Solutions Enabler version (minimum version = V7.1x) & export path:

symcli_ver="-"

if [[ -d /usr/symcli/bin ]]; then

     export PATH=$PATH:/usr/symcli/bin                                                   # export SYMCLI path

     symcli_ver=$($sudo symcli | $awk '/SYMCLI/{print $(NF-3)}')                         # capture Solutions Enabler version
     symcli_ver_01=$(echo $symcli_ver | $awk -F"." '{print substr($1,2)}')
     symcli_ver_02=$(echo $symcli_ver | $awk -F"." '{print $2}')

     egrep "o" ${tmp}_options > /dev/null                                                # check for "-o" (override option).  If not found ($? = 1), verify minimum SYMCLI version

     if [[ $? -eq 1 ]];then

          if [[ symcli_ver_01 -lt 7 ]] || [[ symcli_ver_01 -eq 7 && symcli_ver_02 -lt 1 ]];then
               echo "Warning: Solutions Enabler version $symcli_ver is too low on $(uname -n | tr '[a-z]' '[A-Z]')"     | $awk '{print "\n"$0}'         >> ${tmp}_stderr
               echo "Warning: Upgrade Solutions Enabler (minimum: V7.1x) & try again.  \"rdflist\" exiting."            | $awk '{print "\n"$0}'         >> ${tmp}_stderr
               echo "(\"-o\" (override) option may be used to attempt running \"rdflist\" at current SYMCLI version.)"  | $awk '{print "\n"$0"\n"}'     >> ${tmp}_stderr
               cat ${tmp}_stderr
               echo "\"${script} ${parms}\" output in ${tmp}_stderr"                                                    | $awk '{print $0"\n"}'
               exit 1
          fi
     fi

else echo ""                                                                              > ${tmp}_stderr
     echo "SYMCLI path \"/usr/symcli/bin\" not found."                                   >> ${tmp}_stderr
     echo ""                                                                             >> ${tmp}_stderr
     echo "Install Solutions Enabler or run \"${script}\" from a different host."        >> ${tmp}_stderr
     echo "\"${script} ${parms}\" output in ${tmp}_stderr"
     exit 1                                                                              # exit if SYMCLI not found
fi

# "-d" option (run "symcfg discover" to sync up SYMAPI_DB):

if egrep "d" ${tmp}_options > /dev/null;then
     $sudo symcfg discover                                                               # if "-d" then run "symcfg discover"

     if [[ $? -ne 0 ]]
     then
         echo ""
         echo "\"symcfg discover\" had non-zero return code $?" >> ${tmp}_stderr
         echo "\"${script} ${parms}\" output in ${tmp}_stderr"
         exit 1                                                                          # exit if "symcfg discover" -ne 0
     fi
fi

# Collect Data:

$sudo rm -rf ${base}${sid}.txt                                                           # remove previous output

$sudo symcfg -sid $sid list 2>${tmp}_stderr > ${tmp}_cfg                                 # "symcfg -sid nnnn list"

if [[ $? -ne 0 ]]
then
    echo ""                                                                              >> ${tmp}_stderr
    echo "\"symcfg -sid $sid list\" had non-zero return code $?"                         >> ${tmp}_stderr
    echo "\"${script} ${parms}\" output in ${tmp}_stderr"
    exit 1                                                                               # exit if "symcfg list" -ne 0
fi

symm_id=$($awk '$1~/000/{print $1}' ${tmp}_cfg)                                          # capture Symmetrix S/N
symm_loc=$($awk '$1~/000/{print $2}' ${tmp}_cfg)                                         # determine "Local/Remote"
symm_mod=$($awk '$1~/000/{print $3}' ${tmp}_cfg)                                         # capture Symmetrix model
symmwin=$($awk '$1~/000/{print $4}' ${tmp}_cfg)                                          # Symmwin level (symcfg)

# $sudo symconfigure -sid $sid list -v 2>${tmp}_stderr > ${tmp}_cfgr                     # "symconfigure list -v"

# if [[ $? -eq 0 ]]
# then symmwin=$($awk '/Configuration Server Version/{print $NF}' ${tmp}_cfgr)           # Symmwin level (symconfigure)
# else symmwin=$($awk '$1~/000/{print $4}' ${tmp}_cfg)                                   # Symmwin level (symcfg)
# fi

# Create Header:

echo ""                                                   > ${base}${sid}${ts}.txt
echo " Command: $script $parms"                          >> ${base}${sid}${ts}.txt
echo ""                                                  >> ${base}${sid}${ts}.txt
echo "Hostname: $(hostname)"                             >> ${base}${sid}${ts}.txt
echo " OS Type: $os_type"                                >> ${base}${sid}${ts}.txt
echo " OS Vers: $os_ver"                                 >> ${base}${sid}${ts}.txt
echo "    Date: $date $time"                             >> ${base}${sid}${ts}.txt
echo "  SYMCLI: $symcli_ver"                             >> ${base}${sid}${ts}.txt
echo "   Model: $symm_mod"                               >> ${base}${sid}${ts}.txt
echo "  SymmID: $symm_id"                                >> ${base}${sid}${ts}.txt
echo " Symmwin: $symmwin"                                >> ${base}${sid}${ts}.txt
echo "Location: $symm_loc"                               >> ${base}${sid}${ts}.txt

$sudo symrdf -sid $sid list 2>>${tmp}_stderr                                                                        > ${tmp}_${sid}rdf

if [[ $? -ne 0 ]];then

     srdf_ts_feat="Unknown"

     if egrep "There are no RDF devices that are configured in this Symmetrix." ${tmp}_stderr > /dev/null;then
          srdf_ts_feat="Not_In_Use"
     fi

     echo " SRDF TS: $srdf_ts_feat"                                                                                >> ${base}${sid}${ts}.txt
     echo ""                                                                                                       >> ${base}${sid}${ts}.txt

     if egrep "There are no RDF devices that are configured in this Symmetrix." ${tmp}_stderr > /dev/null;then
          echo "SRDF ${symm_mod}_${sid} Summary Data:"                                                             >> ${base}${sid}${ts}.txt
          echo ""                                                                                                  >> ${base}${sid}${ts}.txt
          echo "No SRDF volumes found in Symmetrix ${symm_mod}_${sid}."                                            >> ${base}${sid}${ts}.txt
          echo ""                                                                                                  >> ${base}${sid}${ts}.txt
     fi

     if [[ -s ${tmp}_stderr ]];then
          echo "STD_ERR:"                                                                                          >> ${base}${sid}${ts}.txt
          cat ${tmp}_stderr                                                                                        >> ${base}${sid}${ts}.txt
          echo ""                                                                                                  >> ${base}${sid}${ts}.txt
     fi
     cat ${base}${sid}${ts}.txt
     echo "\"rdflist\" output in ${base}${sid}${ts}.txt"
     echo ""
     exit 1
fi

# "capture/format" Symmetrix SRDF information:

# Sample "non-Concurrent" SRDF output:

# $1         $2       $3  $4     $5     $6    $7         $8  $9    $10      $11       $12       $13          $14        $15 $16   $17      $18       $19       $20      $21        $22
# LCL_SID    Dyn_RDF  Rx  LCL    RMTa   RMTb  RMT_SID_a  Ga  Md_a  RDF_TSa  InTk_R1a  InTk_R2a  State_a      RMT_SID_b  Gb  Md_b  RDF_TSb  InTk_R1b  InTk_R2b  State_b  Type       MB
# 196801695  DRX      R1  000A8  00131  -     196801755  50  Sync  2017_11  0         43179     Partitioned  -          -   -     -        -         -         -        RDF1-TDEV  8194

$sudo symdev -sid $sid list -v 2>>${tmp}_stderr |\
$awk                             'BEGIN {ct_hyper=0;rdf=0
                                         print "LCL_SID Dyn_RDF Rx LCL RMTa RMTb RMT_SID_a Ga Md_a RDF_TSa InTk_R1a InTk_R2a State_a RMT_SID_b Gb Md_b RDF_TSb InTk_R1b InTk_R2b State_b Type MB"}
            /^    Device Symmetrix Name/{if (ct_hyper>0 && rdf==1) {printf("%-9s %-7s %2s %s %s %-10s %-9s %-2s %-4s %-7s %8s %8s %-14s %-9s %-2s %-4s %-7s %8s %8s %-14s %-12s %6s\n",
                                         lcl,dyn_rdf,rdf_type,hyper,rdf_a,rdf_b,rmt_a,grp_a,mod_a,rts_a,in1_a,in2_a,ste_a,rmt_b,grp_b,mod_b,rts_b,in1_b,in2_b,ste_b,type,size)}
                                         hyper=$NF;++ct_hyper;rdf=0;ct_rdf=0}
                     /^    Symmetrix ID/{lcl=substr($NF,4)}
                    /^        MegaBytes/{size=$NF}
             /^    Device Configuration/{if ($4~/RDF/) {rdf=1;rdf_type="R"substr($4,4,1)
                                         if ($5~/BCV/) {type=$4"-"$5} else {type=$4}
                                         if ($NF~/Member/) {size="-"}}}
           /^    Dynamic RDF Capability/{dynrdf="-";if ($NF~/None/) {dyn_rdf=$NF}
                                                    if ($NF~/RDF1_Capable/) {dynrdf="DR1"};if ($NF~/RDF2_Capable/) {dyn_rdf="DR2"}
                                                    if ($NF~/RDF1_OR_RDF2_Capable/) {dyn_rdf="DRX"}}
               /RDF \(RA\) Group Number/{++ct_rdf
                                         if (rdf==1 && ct_rdf==1) {grp_a="-";grp_b="-";if ($NF!~/:/) {grp_a=$(NF-1)}}
                                         if (rdf==1 && ct_rdf==2)                     {if ($NF!~/:/) {grp_b=$(NF-1)}}}
          /Remote Device Symmetrix Name/{if (rdf==1 && ct_rdf==1) {rdf_a="-";rdf_b="-";if ($NF!~/:/) {rdf_a=$NF}}
                                         if (rdf==1 && ct_rdf==2)                     {if ($NF!~/:/) {rdf_b=$NF}}}
                   /Remote Symmetrix ID/{if (rdf==1 && ct_rdf==1) {rmt_a="-";rmt_b="-";if ($NF!~/:/) {rmt_a=substr($NF,4)}}
                                         if (rdf==1 && ct_rdf==2)                     {if ($NF!~/:/) {rmt_b=substr($NF,4)}}}
                              /RDF Mode/{if (rdf==1 && ct_rdf==1) {mod_a="-";mod_b="-";if ($NF!~/:/) {mod_a=substr($NF,1,4)}}
                                         if (rdf==1 && ct_rdf==2)                     {if ($NF!~/:/) {mod_b=substr($NF,1,4)}}}
/Time of Last Device Link Status Change/{if (NF==13) {gsub(/Jan/,"01",$10);gsub(/Feb/,"02",$10);gsub(/Mar/,"03",$10);gsub(/Apr/,"04",$10)
                                                      gsub(/May/,"05",$10);gsub(/Jun/,"06",$10);gsub(/Jul/,"07",$10);gsub(/Aug/,"08",$10)
                                                      gsub(/Sep/,"09",$10);gsub(/Oct/,"10",$10);gsub(/Nov/,"11",$10);gsub(/Dec/,"12",$10)}
                                         if (rdf==1 && ct_rdf==1) {rts_a="-";rts_b="-";if (NF==9) {rts_a=$NF};if (NF==13) {rts_a=$NF"_"$10}}
                                         if (rdf==1 && ct_rdf==2)                     {if (NF==9) {rts_b=$NF};if (NF==13) {rts_b=$NF"_"$10}}}
                        /RDF Pair State/{if (rdf==1 && ct_rdf==1) {ste_a="-";ste_b="-";if ($NF!~/:/) {ste_a=$NF}}
                                         if (rdf==1 && ct_rdf==2)                     {if ($NF!~/:/) {ste_b=$NF}}}
           /Number of R1 Invalid Tracks/{if (rdf==1 && ct_rdf==1) {in1_a="-";in1_b="-";if ($NF!~/:/) {in1_a=$NF}}
                                         if (rdf==1 && ct_rdf==2)                     {if ($NF!~/:/) {in1_b=$NF}}}
           /Number of R2 Invalid Tracks/{if (rdf==1 && ct_rdf==1) {in2_a="-";in2_b="-";if ($NF!~/:/) {in2_a=$NF}}
                                         if (rdf==1 && ct_rdf==2)                     {if ($NF!~/:/) {in2_b=$NF}}}
                                    END {if (ct_hyper>0 && rdf==1) {printf("%-9s %-7s %2s %s %s %-10s %-9s %-2s %-4s %-7s %8s %8s %-14s %-9s %-2s %-4s %-7s %8s %8s %-14s %-12s %6s",
                                         lcl,dyn_rdf,rdf_type,hyper,rdf_a,rdf_b,rmt_a,grp_a,mod_a,rts_a,in1_a,in2_a,ste_a,rmt_b,grp_b,mod_b,rts_b,in1_b,in2_b,ste_b,type,size)}
                                        }' | sed "s/\+/-/g" | column -t > ${tmp}_det

# Create temporary SRDF "count/srdf_ts/volume/MB" Distribution file:

$awk 'NF==22{if ($NF~/[0-9]/) {print $10,$(NF-1),$NF}}' ${tmp}_det | sort | uniq -c                                            > ${tmp}_${sid}dist

# Determine if array is using SRDF

det_num="$(wc -l ${tmp}_det | $awk '{print $1}')"                                                                              # SRDF present if $det_num -gt 1

# Determine if SRDF timestamp feature is in use on the array:                                                                  # SRDF timestamp feature

patt_ts="[0-9][0-9][0-9][0-9]_[01][0-9]"                                                                                       # SRDF timestamp pattern

srdf_ts_fnd=0;srdf_ts_feat="Not_In_Use"                                                                                        # (0: not in use)
if [[ $($awk '$10~patt_ts' patt_ts=$patt_ts ${tmp}_det | wc -l) -gt 0 ]];then srdf_ts_fnd=1;srdf_ts_feat="In_Use";fi           # (1: in use)

echo " SRDF TS: $srdf_ts_feat"                                                                                                 >> ${base}${sid}${ts}.txt

# Determine total formatted SRDF usage capacitiy (GB):

srdf_total_gb=0;srdf_total_gb=$($awk 'BEGIN {srdf_total_gb=0};$NF~/[0-9]/{srdf_total_gb=srdf_total_gb+$NF/1024};END {printf("%.0f",srdf_total_gb)}' ${tmp}_det)

# Determine formatted SRDF usage capacitiy with no associated SRDF timestamp (GB):

srdf_no_ts_gb=0;srdf_no_ts_gb=$($awk 'BEGIN {srdf_no_ts_gb=0};$NF~/[0-9]/ && $10!~patt_ts{srdf_no_ts_gb=srdf_no_ts_gb+$NF/1024};END {printf("%.0f",srdf_no_ts_gb)}' patt_ts=$patt_ts ${tmp}_det)

# Determine timestamp based formatted SRDF usage ($srdf_ts_pres_gb: "$srdf_ts - present",  $srdf_ts_past_gb: "before $srdf_ts"):

if [[ srdf_ts_fnd -eq 1 ]];then

     srdf_ts_pres_gb=$($awk                'BEGIN {srdf_ts_pres_gb=0}
                       $NF~/[0-9]/ && $10~patt_ts {pair_yr=substr($10,1,4);pair_mo=substr($10,6,2)
                                                   if (pair_yr>parm_yr || pair_yr==parm_yr && pair_mo>=parm_mo) {srdf_ts_pres_gb=srdf_ts_pres_gb+$NF/1024}}
                                              END {printf("%.0f",srdf_ts_pres_gb)}
                                           ' patt_ts=$patt_ts parm_yr=$srdf_ts_yr parm_mo=$srdf_ts_mo ${tmp}_det)

     srdf_ts_past_gb=$($awk                'BEGIN {srdf_ts_past_gb=0}
                       $NF~/[0-9]/ && $10~patt_ts {pair_yr=substr($10,1,4);pair_mo=substr($10,6,2)
                                                   if (pair_yr<parm_yr || pair_yr==parm_yr && pair_mo<parm_mo) {srdf_ts_past_gb=srdf_ts_past_gb+$NF/1024}}
                                              END {printf("%.0f",srdf_ts_past_gb)}
                                           ' patt_ts=$patt_ts parm_yr=$srdf_ts_yr parm_mo=$srdf_ts_mo ${tmp}_det)
fi

# Display SRDF connectivity & formatted usage (GB) summary data:

echo ""                                                                                                                        >> ${base}${sid}${ts}.txt
echo "SRDF ${symm_mod}_${sid} Summary Data:"                                                                                   >> ${base}${sid}${ts}.txt

if [[ det_num -gt 1 ]];then

     $awk '/^[0-9]/{print $1,$3,$7,$8,$14,$15}' ${tmp}_det | sort -u | sed "s/ - -$//g" |\
     $awk '  BEGIN {print " "}
           NF == 4 {print $1,$2,$3" (RDFG "$4")"}
           NF == 6 {print $1,$2,$3" (RDFG "$4") "$5" (RDFG "$6")"}'                                                            >> ${base}${sid}${ts}.txt

     echo ""                                                                                                                   >> ${base}${sid}${ts}.txt
     echo         "           Total Formatted SRDF Capacity (GB):  $(echo $srdf_total_gb   | $awk '{printf("%10s",$1)}')"      >> ${base}${sid}${ts}.txt
     echo ""                                                                                                                   >> ${base}${sid}${ts}.txt
     echo         "   No Associated Timestamp SRDF Capacity (GB):  $(echo $srdf_no_ts_gb   | $awk '{printf("%10s",$1)}')"      >> ${base}${sid}${ts}.txt

     if [[ $srdf_ts_fnd -eq 1 ]];then
          echo ""                                                                                                              >> ${base}${sid}${ts}.txt
          echo "In Use (prior to ${srdf_ts})  SRDF Capacity (GB):  $(echo $srdf_ts_past_gb | $awk '{printf("%10s",$1)}')"      >> ${base}${sid}${ts}.txt
          echo ""                                                                                                              >> ${base}${sid}${ts}.txt
          echo "In Use (${srdf_ts} - Present) SRDF Capacity (GB):  $(echo $srdf_ts_pres_gb | $awk '{printf("%10s",$1)}')"      >> ${base}${sid}${ts}.txt
     fi

else
     echo ""                                                                                                                   >> ${base}${sid}${ts}.txt
     echo "No SRDF volumes found in Symmetrix ${symm_mod}_${sid}."                                                             >> ${base}${sid}${ts}.txt
     echo ""                                                                                                                   >> ${base}${sid}${ts}.txt
fi

# "check/add" STD_ERR:

if [[ -s ${tmp}_stderr ]];
then
     echo "STD_ERR:"                                                                                                           >> ${base}${sid}${ts}.txt
     cat ${tmp}_stderr                                                                                                         >> ${base}${sid}${ts}.txt
     echo ""                                                                                                                   >> ${base}${sid}${ts}.txt
fi

# Screen message and add SRDF detailed data to output file if present:

cat ${base}${sid}${ts}.txt

if [[ $det_num -gt 1 ]];then
     echo ""
     echo "SRDF ${symm_mod}_${sid} Detailed Data in ${base}${sid}${ts}.txt"
     echo ""
     echo ""                                                                                                                   >> ${base}${sid}${ts}.txt
     echo "SRDF ${symm_mod}_${sid} Detailed Data:"                                                                             >> ${base}${sid}${ts}.txt
     echo ""                                                                                                                   >> ${base}${sid}${ts}.txt
     cat ${tmp}_det                                                                                                            >> ${base}${sid}${ts}.txt
else
     echo "\"rdflist\" output in ${base}${sid}${ts}.txt"
     echo ""
fi

# "-y" option (determine if temporary files are to be saved):

egrep "y" ${tmp}_options > /dev/null                                                                 # test for "-y" option (save "${tmp}*" temporary files)

if [[ $? -ne 0 ]];then $sudo rm -rf ${tmp}*;fi                                                   # if not "-y" option, then remove "${tmp}*" temporary files